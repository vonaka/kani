var searchIndex = new Map(JSON.parse('[["kani",{"t":"GKYFKYPPPEYPPFEHMNNNNHCQHHEENNNNNNHMCNNNHCHQXNQCNNNQNNNCQQQQQNNNCOQQQQXXCXNHXXOQQXXCXCQXEOXXNNNNNNNNNNXCEXXXXXHPPFFGKHHNNNNNNNNNNNNNNMNNHNNNNNNNNNHKMHHHHHHHHFNNNNNNNNNNHHHH","n":["AllocationStatus","Arbitrary","","ArbitraryPointer","BoundedArbitrary","","Dangling","DeadObject","InBounds","Invariant","","Null","OutOfBounds","PointerGenerator","RoundRobin","any","","","any_alloc_status","any_array","any_in_bounds","any_where","arbitrary","arbitrary_tuple","assert","assume","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","bounded_any","","bounded_arbitrary","clone","clone_into","clone_to_uninit","concrete_playback_run","contracts","cover","","ensures","eq","exists","float","fmt","","","forall","from","","","futures","generate_arbitrary","generate_bounded_arbitrary","generate_float","generate_models","implies","into","","","invariant","is_initialized","kani_intrinsics","kani_lib","kani_mem","kani_mem_init","loop_invariant","loop_modifies","mem","modifies","new","pointer_generator","proof","proof_for_contract","ptr","ptr_generator","ptr_generator_fn","recursion","requires","shadow","should_panic","slice","slice_generator","solver","spawn","status","stub","stub_verified","to_owned","try_from","","","try_into","","","type_id","","","unwind","vec","yield_now","ensures","modifies","proof_for_contract","requires","stub_verified","float_to_int_in_range","CanAssumeRunning","CannotAssumeRunning","JoinHandle","RoundRobin","SchedulingAssumption","SchedulingStrategy","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","default","from","","","into","","","into_future","pick_task","","poll","spawn","try_from","","","try_into","","","type_id","","","yield_now","Invariant","is_safe","can_dereference","can_read_unaligned","can_write","can_write_unaligned","checked_align_of_raw","checked_size_of_raw","is_inbounds","same_allocation","ShadowMem","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","any_slice_of_array","any_slice_of_array_mut","any_vec","exact_vec"],"q":[[0,"kani"],[105,"kani::contracts"],[110,"kani::float"],[111,"kani::futures"],[147,"kani::invariant"],[149,"kani::mem"],[157,"kani::shadow"],[168,"kani::slice"],[170,"kani::vec"],[172,"kani::arbitrary_ptr"],[173,"core::ops::function"],[174,"alloc::vec"],[175,"core::fmt"],[176,"core::result"],[177,"core::any"],[178,"core::convert::num"],[179,"core::future::future"],[180,"core::marker"],[181,"core::pin"],[182,"core::task::wake"],[183,"core::task::poll"],[184,"core::option"],[185,"kani_macros"],[186,"kani_core"]],"i":"``````d00``00```b1h10```````0l3103`Aj`444`````4``214`214``````214`1````````2```1``````````1``4214214214`````````Ch0``````0ClCd21002102101Cb12`321321321``Dd`````````Dh000000000````","f":"```````````````{{}cb}{{}b}{{}d}{{{j{fh}}}{{l{c}}}b}{{}{{n{b}}}}1{ecb{{Ad{{j{c}}}{{A`{Ab}}}}}}``{{Ab{j{Af}}}Ah}{AbAh}``{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{}cAj}{{}Aj}`{{{j{d}}}d}{{j{j{fc}}}Ah{}}{{jAl}Ah}{{{An{{An{Al}}}}c}AhB`}`9``{{{j{d}}{j{d}}}Ab}``{{{j{h}}{j{fBb}}}Bd}{{{j{{l{c}}}}{j{fBb}}}BdBf}{{{j{d}}{j{fBb}}}Bd}`{cc{}}00``````{{}c{}}00`{lAb}````````{{}h}0``{l}``````````{ld}``{jc{}}{c{{Bh{e}}}{}{}}00{{}{{Bh{c}}}{}}00{jBj}00````````{eAb{}{{Bl{c}}}}``````{ec{}{{Bn{}{{A`{c}}}}}}{{ce}Ah{{Bn{}{{A`{Ah}}}}C`}Cb}{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{}Cd}???>>>{{}}{{{j{fCb}}Cf}{{Cj{CfCh}}}}{{{j{fCd}}Cf}{{Cj{CfCh}}}}{{{Cn{{j{fCl}}}}{j{fD`}}}{{Db{c}}}{}}{cCl{{Bn{}{{A`{Ah}}}}C`}}===<<<;;;{{}{{`{{Bn{}{{A`{Ah}}}}}}}}`{{{j{Dd}}}Ab}{{}Ab}000{{}{{Df{Cf}}}}011`;:{cc{}}{{{j{{Dh{c}}}}}cDj}{{}c{}}{c{{Dh{c}}}Dj}{{{j{f{Dh{c}}}}c}AhDj}{c{{Bh{e}}}{}{}}{{}{{Bh{c}}}{}}{jBj}{{{j{{n{c}}}}}{{j{{Dl{c}}}}}{}}{{{j{f{n{c}}}}}{{j{f{Dl{c}}}}}{}}{{}{{An{c}}}b}0","D":"Kn","p":[[10,"Arbitrary",0],[6,"AllocationStatus",0,172],[0,"mut"],[5,"PointerGenerator",0,172],[1,"reference",null,null,1],[5,"ArbitraryPointer",0,172],[1,"array"],[17,"Output"],[1,"bool"],[10,"FnOnce",173],[1,"str"],[1,"unit"],[10,"BoundedArbitrary",0],[1,"u8"],[5,"Vec",174],[10,"Fn",173],[5,"Formatter",175],[8,"Result",175],[10,"Debug",175],[6,"Result",176,null,1],[5,"TypeId",177],[10,"FloatToInt",178],[10,"Future",179,null,1],[10,"Sync",180],[10,"SchedulingStrategy",111],[5,"RoundRobin",111],[1,"usize"],[6,"SchedulingAssumption",111],[1,"tuple",null,null,1],[5,"JoinHandle",111],[5,"Pin",181],[5,"Context",182],[6,"Poll",183],[10,"Invariant",147],[6,"Option",184,null,1],[5,"ShadowMem",157],[10,"Copy",180],[1,"slice"]],"r":[[0,172],[2,185],[3,172],[5,185],[6,172],[7,172],[8,172],[9,147],[10,185],[11,172],[12,172],[13,172],[14,111],[17,172],[18,172],[20,172],[23,186],[26,111],[27,111],[28,172],[29,172],[30,172],[31,172],[32,172],[33,172],[37,172],[38,172],[39,172],[44,185],[45,172],[48,172],[49,172],[50,172],[52,172],[53,172],[54,172],[56,186],[57,186],[58,186],[59,186],[61,172],[62,172],[63,172],[65,172],[66,186],[67,186],[68,186],[69,186],[70,185],[71,185],[73,185],[74,172],[75,172],[76,185],[77,185],[78,172],[79,186],[80,186],[81,185],[82,185],[84,185],[86,186],[87,185],[88,111],[89,172],[90,185],[91,185],[92,172],[93,172],[94,172],[95,172],[96,172],[97,172],[98,172],[99,172],[100,172],[101,172],[102,185],[104,111],[105,185],[106,185],[107,185],[108,185],[109,185]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAE0AHQAAAAAAAgAAAAUAAAAKAAAADwAAABEAAQAUAAAAGwAHACQAAAAmAAIALAAAAC4AAQAxAAMAOQADAEUAAQBIAAAAUAABAFYAAQBZAAAAXQAJAGgAAQBwAAEAeAAGAIUAAACHAAEAigAIAJUAAACfAAEApgACAA==","P":[[15,"T"],[16,""],[18,"T"],[19,""],[20,"T"],[21,"T,F"],[24,""],[28,"T"],[35,""],[38,"T"],[39,""],[40,"F"],[42,""],[49,"T"],[50,""],[52,"T"],[61,"U"],[65,""],[92,"T"],[93,"U,T"],[96,"U"],[99,""],[110,"Int,Float"],[117,"T"],[118,"F"],[119,"T"],[125,""],[126,"T"],[129,"U"],[132,""],[135,"Future::Output"],[136,"F"],[137,"U,T"],[140,"U"],[143,""],[158,"T"],[162,"U"],[163,"T"],[165,"U,T"],[166,"U"],[167,""],[168,"T"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5840]}